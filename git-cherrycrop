#!/bin/bash

# Function to display usage instructions
function usage() {
    echo "Usage: git cherrycrop -b <source-branch> -p <prefix>"
    exit 1
}

# Initialize variables for source branch and prefix
BRANCH=""
PREFIX=""

# Parse command-line options for branch and prefix
while getopts "b:p:" opt; do
  case $opt in
    b) BRANCH="$OPTARG" ;;  # The source branch to cherry-pick from
    p) PREFIX="$OPTARG" ;;  # The prefix used to filter commits (e.g., ticket number)
    *) usage ;;             # If incorrect options are provided, display usage
  esac
done

# Check if both branch and prefix are provided
if [ -z "$BRANCH" ] || [ -z "$PREFIX" ]; then
    usage  # If either branch or prefix is missing, show usage
fi

# Define a cleanup function to ensure we exit cherry-pick mode if needed
function cleanup {
    if git cherry-pick --quit > /dev/null 2>&1; then
        echo "Exiting cherry-pick mode."
    fi
}

# Set trap to ensure cleanup is called on exit, even if there is an error
trap cleanup EXIT

# Check if the specified branch exists locally
if ! git show-ref --verify --quiet refs/heads/$BRANCH; then
    echo "Branch \"$BRANCH\" does not exist locally. Please check the branch name."
    exit 1
fi

# Find and cherry-pick commits with the given prefix from the specified branch, in reverse order (oldest first)
echo "Cherry-picking commits from branch \"$BRANCH\" with prefix \"$PREFIX\"..."
for commit in $(git log $BRANCH --grep="$PREFIX" --pretty=format:"%h" --reverse)
do
    echo "Cherry-picking commit: $commit"
    git cherry-pick $commit

    if [ $? -ne 0 ]; then
        # Check if the conflict is due to an empty cherry-pick
        if git status | grep "The previous cherry-pick is now empty" > /dev/null 2>&1; then
            echo "Skipping empty commit: $commit"
            git cherry-pick --skip
            continue
        else
            echo "Cherry-pick failed due to conflicts. Please resolve conflicts and then run 'git cherry-pick --continue'."
            echo "You can also skip this commit with 'git cherry-pick --skip' or abort the cherry-pick with 'git cherry-pick --abort'."
            exit 1
        fi
    fi
done

echo "All applicable commits with prefix \"$PREFIX\" from branch \"$BRANCH\" have been successfully cherry-picked!"
